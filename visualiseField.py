import matplotlib.pyplot as plt
import math as m 

def visualise(side, vDens, raw) : 
    vField = raw
    plt.plot([0,side],[0,side], 'w')
    maxX = vField[0][0][0]
    maxY = vField[0][0][1]
    for i in range(int(side/vDens)) : 
        for j in range(int(side/vDens)) : 
            plt.arrow(i*vDens, j*vDens, 8*vField[i][j][0], 8*vField[i][j][1], color='red', head_width=8)
            maxX = vField[i][j][0] if abs(vField[i][j][0])>abs(maxX) else maxX
            maxY = vField[i][j][1] if abs(vField[i][j][1])>abs(maxY) else maxY
            print(vField[i][j])
            print(i,j)
            print("\n")
    print(maxX, maxY)
    plt.show()

def hilbertCurve(n, d) : 
    s = 1 
    x, y = 0, 0 
    while s < n :
        rx = 1&(d>>1) 
        ry = 1&(d^rx)
        if not ry : 
            if rx : 
                x, y = s-1-x, s-1-y
            temp = x
            x = y 
            y = temp
        x += s*rx
        y += s*ry 
        d >>= 2
        s <<= 1
    return (x, y)

#visualise(1024, 128, "[[(1.1858549633951863, -5.695194914900031), (4.080006473907619, -3.715245395128728), (-1.703771754792303, -3.1620503708989416), (0.4690710568324146, -6.844902065185351), (-2.932843405454201, -6.198630216887301), (-1.6778378138462442, -5.411983021528256), (-2.884841009125532, -6.224094697100088), (-2.788418550424564, -4.742662168224787)],[(2.0316635802082725, -5.0318378084487225), (0.7741406163245297, -5.527885160466125), (0.2912444724224397, -6.853827831983715), (-3.089890779955466, -5.126434235536214), (-0.5756453433586729, -5.738598884344613), (-2.2221870015699117, -6.15089313291507), (-5.3991483855801, -3.948944203282455), (-4.894251743438908, -4.7363008788582865)],[(4.334387776882287, -4.936771886019459), (-2.4076819739996496, -4.696912331363593), (-5.726180920301113, -3.6117906364365444), (-2.009290389163719, -6.485511210678888), (-4.9924678623668495, 4.0594981363104505), (-5.0601270233245765, 2.065325839421349), (-6.553063529303457, 0.9994924526880296), (-4.589986774538898, 2.15139879372506)],[(3.4855733137377465, -5.908728902892171), (1.5283751185297403, -6.579739948051116), (-4.768421491416697, -4.067108214994733), (-4.151161470546571, -2.979639355644417), (-1.221458126864912, 6.099855349256105), (-4.951103820317467, 2.044187479541649), (-4.536400443969346, 4.831771554330358), (-6.614247337374495, 1.6120712247875466)],[(3.6556465588435287, -4.735888354214378), (3.045558422258408, -5.3049072876390895), (1.4439900829582004, -6.4846275959785356), (1.819050455064352, -6.52265539795758), (0.7115434829161017, 5.849992328102066), (5.90016149712437, 1.8597856934490815), (5.138552078592801, 4.498362466154722), (6.0284827074515945, 2.6009073160816056)],[(5.69914151492985, -2.54809869771976), (4.148107286960778, -3.010696365134267), (3.290002765958372, -3.6360196395561215), (1.7758707106480724, -4.895500443743042), (3.731972294931675, 4.162886759951575), (4.6938720878522044, 2.723835119872506), (3.540852568940533, 1.0266650838831979), (6.641951433057397, -1.500358694657072)],[(6.562659507389168, 1.1899569183334933), (6.215923518809806, 0.11291758312439372), (-2.1806616250108526, -6.366358610956371), (0.5369037670521747, -6.35723585929395), (2.666108085828905, -4.4698596327920175), (3.2762459435834677, -5.813272458859698), (5.577935214566113, -2.654870706428738), (3.934763577871359, -3.95976790620608)],[(6.519347905238049, -1.64291782274889), (4.9884154422002105, 0.6496249769499278), (2.055689123026325, -6.54694814745827), (0.7762723650759095, -3.949974685481), (1.475951239777271, -6.33215836287142), (2.954435426077867, -5.4289301251861115), (4.321593521027022, -5.320858212607116), (6.101178831020573, -1.7630900900744753)]]")

def clockwiseRotation() : 
    grid = [[[] for i in range(8)] for j in range(8)]
    for i in range(8) : 
        for j in range(8) : 
            angle = m.atan((j+1)/(i+1))-m.pi/2
            mag = 7/m.sqrt((j+1)**2+(i+1)**2)
            grid[i][j] = (mag*m.cos(angle), mag*m.sin(angle))
    return grid

def fullCircle(s,v) : 
    grid = [[[] for i in range(int(s/v))] for j in range(int(s/v))]
    for i in range(int(s/v)) : 
        for j in range(int(s/v)) : 
            angle = m.atan((j-3.5)/(i-3.5))+m.pi/2
            angle *= abs(angle)
            mag = 8/(3.5-i)
            grid[i][j] = (mag*m.cos(angle), mag*m.sin(angle))
    return grid


visualise(1024, 128, [[(0.3904026050911083, 6.825735334672099), (4.237809133439495, 4.832659344028417), (3.292382273218796, 5.176076013780331), (3.6977123841586095, 5.717102627941262), (1.7006603102545033, 4.234676539397143), (-3.5198537310723914, 5.600069768959603), (-5.03574748140575, 3.8850667211666203), (-5.259173333807582, 3.5015627258798188)],[(5.5620506777013485, 1.4770920672007437), (5.01260480311639, 1.166495169705082), (6.215987115696466, 2.812499975968653), (4.698461854881152, 0.5078072646190093), (1.9955330846543156, 6.498923536427253), (-2.336170618637916, 5.543419669990415), (0.2806759216578696, 6.079520967037645), (-1.778940158707164, 6.602435514828043)],[(4.816943668450542, 1.191198392626044), (5.42234456898743, 2.2581826031422243), (3.6114758744605346, 4.424771274522234), (6.846668132148054, 0.23618671935925953), (6.531208049960113, 0.5378234521582465), (5.489887236024195, 3.2393346522796373), (3.263930906307492, 3.186319075381995), (1.6994406568756508, 4.229585521540592)],[(6.8392302121601904, -0.49710474505946006), (6.353267751950531, -1.2827301942924763), (6.437008715665214, 2.3609415458142324), (6.397506728690674, 1.8266465873273927), (4.800705008777702, 1.0010896336519985), (2.7747069443430963, 6.251004757399325), (2.056800551930944, 4.4809418207612985), (2.0928934242480106, 3.719818995178643)],[(-0.8579346732974449, -5.792225979729528), (-0.15644335760218292, -6.844712333349002), (4.315569567018349, -2.658988444280328), (2.7119907198394064, -4.124172052467829), (6.534677883324705, 0.69940908816021), (3.505602710542002, 5.8696154581926026), (2.5993350616481745, 6.217500013539298), (4.208024031054935, 2.082362023085196)],[(1.4558201582063393, -5.528413810547767), (0.6349721235318398, -5.963528090278091), (3.1195086721111753, -6.082123327644286), (3.6787439224059146, -2.1220508599236383), (5.229984155577056, 1.330726371235587), (4.268779786441774, 3.3758816011428787), (5.718494341555488, 2.9052678433372914), (3.093451537930374, 2.1246060162550675)],[(3.2388471538736625, -5.7242738234227755), (4.809750835374557, -4.715473733162571), (6.219782536709133, 1.4339703323041124), (6.006810728911044, -2.857072699993156), (-0.24690531011853942, 5.885012036313635), (1.1427718304807957, 5.113558368198675), (5.831668277513251, 1.5794218342149715), (3.250309072632288, 4.014572305385932)],[(-0.9281814575382055, -5.4662106769025325), (3.834259569679466, -5.641129659399403), (2.709584607831953, 4.152887401094345), (-0.9724439912797181, 6.674898797591783), (3.5325052465675064, 5.824208360820239), (-1.8344116385159843, 6.605523057111226), (2.735127564173759, 6.105463060379981), (2.623292542525267, 5.032844076392253)]])
